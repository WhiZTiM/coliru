#include <iostream>#include <iterator>#include <algorithm>#include <map>#include <fstream>#include <string>bool read_b(std::ifstream& input, const char *const field){    std::string temp("");    std::getline(input, temp, '\n');//    std::cout << "reading " << temp << " and looking for bool: " << field << std::endl;    //in this case we don't have to do any tricky parsing--make sure we have the right field, then look for "true"//    std::cout << "valid? " << (temp.find(field) != std::string::npos) << std::endl;    return temp.find("true") != std::string::npos;}auto read_str(std::ifstream& input, const char *const field, const char *const default_value = ""){    std::string temp("");    std::getline(input, temp, '\n');//    std::cout << "reading " << temp << " and looking for string: " << field << std::endl;//    std::cout << "valid? " << (temp.find(field) != std::string::npos) << std::endl;    if (temp.find(field) != std::string::npos)    {        auto first_close(std::find(std::cbegin(temp), std::cend(temp), '>'));        std::string return_val(std::next(first_close), std::find(first_close, std::cend(temp), '<'));//        std::cout << "returning " << return_val << " for " << field << std::endl;        return return_val;    }        return std::string(default_value);}struct the_xml_doc{    struct DLNA    {    private:        typedef std::string str;        typedef bool b;    public:        bool isLocal;        std::string manufacturer;        std::string modelName;        std::string IPAddress;        std::string modelNo;    	std::string modelUrl;    	std::string serialNo;                DLNA(std::ifstream& input)        : isLocal(read_b(input, "isLocal"))        , manufacturer(read_str(input, "manufacturer"))        , modelName(read_str(input, "modelName"))        , IPAddress(read_str(input, "IPAddress"))        , modelNo(read_str(input, "modelNo"))        , modelUrl(read_str(input, "modelUrl"))        , serialNo(read_str(input, "serialNo"))        {        };    };        std::vector<DLNA> DLNAs;        the_xml_doc(std::ifstream& input);};auto get_DLNAs(std::ifstream& input){//    std::cout << "get_DLNAs()" << std::endl;    std::vector<the_xml_doc::DLNA> return_vec;    std::string current_line("");    bool parent_found(false);    while(input.good() && current_line != "</parent>")    {        std::getline(input, current_line, '\n');//        std::cout << "current_line is " << current_line << std::endl;        if (!parent_found)            parent_found = current_line == "<parent>";        else            parent_found = current_line != "</parent>";                if (parent_found)        {            bool child_found(false);            while(input.good() && current_line != "    </parent>")            {                std::getline(input, current_line, '\n');//                std::cout << "sub current_line is " << current_line << std::endl;                if (!child_found)                    child_found = current_line == "    <child>";                else                {                    child_found = current_line != "    </child>";//                    if (!child_found)//                        std::cout << "found child end" << std::endl;                }                                if (child_found)                    return_vec.push_back(input);            }//            std::cout << "finished all children" << std::endl;        }    }        return return_vec;}the_xml_doc::the_xml_doc(std::ifstream& input): DLNAs(get_DLNAs(input)){}std::ostream& operator<<(std::ostream& os, the_xml_doc::DLNA in){    os << "isLocal: " << in.isLocal << std::endl;    os << "manufacturer: " << in.manufacturer << std::endl;    os << "modelName: " << in.modelName << std::endl;    os << "IPAddress: " << in.IPAddress << std::endl;    os << "modelNo: " << in.modelNo << std::endl;    os << "modelUrl: " << in.modelUrl << std::endl;    os << "serialNo: " << in.serialNo << std::endl;    return os;}std::ostream& operator<<(std::ostream& os, the_xml_doc in){    std::copy(std::cbegin(in.DLNAs), std::cend(in.DLNAs), std::ostream_iterator<the_xml_doc::DLNA>(os, "\n"));        return os;}int main(){    std::cout << "starting up" << std::endl;    std::ifstream my_file("//Archive2//35//3a80c0963bf861//main.cpp");    std::cout << "file loaded" << std::endl;    the_xml_doc doc(my_file);    //the_xml_doc has all the data loaded at this point        std::cout <<std::endl << doc << std::endl;        std::cout << "closing down" << std::endl;    return 0;}