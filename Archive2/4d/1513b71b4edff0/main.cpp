#include <boost/variant.hpp>#include <boost/any.hpp>#include <iostream>#include <iterator>#include <algorithm>#include <map>#include <fstream>#include <string>#include <sys/stat.h>typedef boost::variant<std::string*, int*, bool*> val_t;std::string& deref(val_t& value){    std::cout << "attempting to dereference" << std::endl;    std::cout << "dereferencing: " << boost::get<std::string*>(value) << std::endl;    std::cout << "to get: " << *boost::get<std::string*>(value) << std::endl;    return *boost::get<std::string*>(value);}   class DLNA{public:    std::string isLocal;    std::string manufacturer;	std::string modelName;    std::string IPAddress;	std::string modelNo;	std::string modelUrl;		std::string serialNo;    auto createMap()    {        std::cout << "opening file" << std::endl;        std::ifstream myfile("//Archive2//60//118f9d6d97b206//main.cpp");    	        std::cout << "checking file state" << std::endl;        if (myfile.is_open())        {            std::cout << "file is open" << std::endl;                    	std::map<std::string, val_t> varmap;            varmap["isLocal"] = &isLocal;            varmap["manufacturer"] = &manufacturer;            varmap["modelName"] = &modelName;            varmap["IPAddress"] = &IPAddress;            varmap["modelNo"] = &modelNo;            varmap["modelUrl"] = &modelUrl;            varmap["serialNo"] = &serialNo;        	            std::cout << "reference assigned" << std::endl;                        std::vector<std::string> lines;            while(myfile.good())            {                std::string line;        	    getline(myfile,line, '\r');                lines.push_back(line);            }                        std::cout << "lines size is: " << lines.size() << std::endl;                        for(const std::string& line : lines)            {                std::cout << "reading line:" << std::endl << line << std::endl;                if((line.find("<") != std::string::npos) && (line.find(">")!= std::string::npos))                 {                    std::cout << "brackets found" << std::endl;                    auto first_open(std::find(cbegin(line), cend(line), '<'));                    std::cout << "first open found" << std::endl;                    std::cout << (first_open != end(line)) << std::endl;                    auto first_close(std::next(std::find(cbegin(line), cend(line), '>')));                    std::cout << "first close found" << std::endl;                    std::cout << (first_close != end(line)) << std::endl;                    auto second_open(std::find(first_close, cend(line), '<'));                    std::cout << "second open found" << std::endl;                    std::cout << (second_open != end(line)) << std::endl;                    const std::string key(std::next(first_open), std::prev(first_close));                    std::cout << "key is: " << key << std::endl;                    std::string& ref(deref(varmap[key]));                    std::cout << "ref is: " << ref << std::endl;                    std::cout << "constructing new val" << std::endl;                    const std::string new_val(first_close, second_open);                    std::cout << "new val is: " << new_val << std::endl;                    std::cout << "assigning to reference" << std::endl;                    ref = new_val;                    std::cout << "value assigned" << std::endl;;                                }            };            return varmap;        }        return std::map<std::string, val_t>();    }};std::string getDeviceList(std::map<std::string, val_t> mapvar, std::string key){    std::cout << "key is: " << key << " and val is: ";    std::cout << deref(mapvar[key]) << std::endl;    return deref(mapvar[key]);}int main(){    std::cout << "starting up" << std::endl;    DLNA local;        auto local_vals(local.createMap());    std::cout << "map created" << std::endl;    getDeviceList(local_vals, "isLocal");        std::cout << "closing down" << std::endl;        return 0;}