main.cpp: In constructor 'rule::rule(bool, const string&)':
main.cpp:14:7: warning: 'rule::initial' will be initialized after [-Wreorder]
  bool initial;
       ^
main.cpp:11:12: warning:   'std::__cxx11::string rule::_identifier' [-Wreorder]
     string _identifier;
            ^
main.cpp:15:2: warning:   when initialized here [-Wreorder]
  rule(const bool init, const string& str) : initial(init), _identifier(str) {}
  ^
main.cpp: In member function 'void grammar::eliminate_left_recursion()':
main.cpp:291:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
      for (auto kt = 0; kt < it.second->size(); ++kt)
                           ^
main.cpp:337:25: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (int kt = 0; kt < it.second->size(); ++kt)
                         ^
factor → 'number' | '(' {expr} ')'
expr → {expr} '+' {term} | {expr} '-' {term} | {term}
term → {term} '*' {factor} | {term} '/' {factor} | {factor}
Expanding factor in factor
Elimination not necessary
Expanding expr in factor
Elimination not necessary
Expanding term in factor
Elimination not necessary
Expanding factor in expr
Elimination necessary
Expanding _prod1 in factor
Elimination not necessary
Expanding term in factor
Elimination not necessary
Expanding expr in factor
Elimination not necessary
Expanding factor in factor
Elimination not necessary
_prod1 → ɛ | '+' {term} {_prod1} | '-' {term} {_prod1}
term → {term} '*' {factor} | {term} '/' {factor} | {factor}
expr → {term} {_prod1}
factor → 'number' | '(' {expr} ')'
