In file included from main.cpp:7:
In file included from /usr/local/include/boost/spirit/include/qi.hpp:16:
In file included from /usr/local/include/boost/spirit/home/qi.hpp:21:
In file included from /usr/local/include/boost/spirit/home/qi/nonterminal.hpp:14:
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:304:21: error: no matching function for call to object of type 'const function_type' (aka 'const function<bool (__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > &, context_type &, const skipper_type &)>')
                if (f(first, last, context, skipper))
                    ^
/usr/local/include/boost/spirit/home/qi/reference.hpp:43:30: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<std::__cxx11::basic_string<char> &, boost::fusion::cons<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *&, boost::fusion::cons<boost::iterator_range<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > > &, boost::fusion::nil_> > >, boost::fusion::vector0<void> >, boost::spirit::unused_type, const boost::spirit::unused_type>' requested here
            return ref.get().parse(first, last, context, skipper, attr_);
                             ^
/usr/local/include/boost/spirit/home/qi/auxiliary/lazy.hpp:55:22: note: in instantiation of function template specialization 'boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> >::parse<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::__cxx11::basic_string<char> &, boost::fusion::cons<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *&, boost::fusion::cons<boost::iterator_range<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > > &, boost::fusion::nil_> > >, boost::fusion::vector0<void> >, boost::spirit::unused_type, const boost::spirit::unused_type>' requested here
            return p.parse(first, last, context, skipper, attr);
                     ^
/usr/local/include/boost/spirit/home/qi/auxiliary/lazy.hpp:80:20: note: in instantiation of function template specialization 'boost::spirit::qi::detail::lazy_parse_impl<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> >, __gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::__cxx11::basic_string<char> &, boost::fusion::cons<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *&, boost::fusion::cons<boost::iterator_range<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > > &, boost::fusion::nil_> > >, boost::fusion::vector0<void> >, boost::spirit::unused_type, const boost::spirit::unused_type>' requested here
            return lazy_parse_impl(p, first, last, context, skipper, attr, auto_rule());
                   ^
/usr/local/include/boost/spirit/home/qi/auxiliary/lazy.hpp:123:28: note: in instantiation of function template specialization 'boost::spirit::qi::detail::lazy_parse_impl_main<boost::spirit::qi::reference<const boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> >, __gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::__cxx11::basic_string<char> &, boost::fusion::cons<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *&, boost::fusion::cons<boost::iterator_range<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > > &, boost::fusion::nil_> > >, boost::fusion::vector0<void> >, boost::spirit::unused_type, const boost::spirit::unused_type>' requested here
            return detail::lazy_parse_impl_main(
                           ^
main.cpp:74:22: note: in instantiation of function template specialization 'boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<boost::phoenix::actor<boost::spirit::attribute<1> > >, 1> >, boost::spirit::unused_type>::parse<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::spirit::context<boost::fusion::cons<std::__cxx11::basic_string<char> &, boost::fusion::cons<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *&, boost::fusion::cons<boost::iterator_range<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > > &, boost::fusion::nil_> > >, boost::fusion::vector0<void> >, boost::spirit::unused_type, const boost::spirit::unused_type>' requested here
      return subject.parse(iter, end, context, skipper, attr_) && (iter==end);
                     ^
/usr/local/include/boost/spirit/home/qi/auxiliary/lazy.hpp:55:22: note: (skipping 25 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)
            return p.parse(first, last, context, skipper, attr);
                     ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:183:19: note: in instantiation of function template specialization 'boost::function<bool (__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > &, const __gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > &, boost::spirit::context<boost::fusion::cons<std::__cxx11::basic_string<char> &, boost::fusion::cons<boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *&, boost::fusion::cons<boost::iterator_range<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > > &, boost::fusion::nil_> > >, boost::fusion::vector0<void> > &, const boost::spirit::unused_type &)>::operator=<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::raw_directive<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::symbols<char, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *, boost::spirit::qi::tst<char, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *>, boost::spirit::qi::tst_pass_through> >, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<1> >, 0>, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > > >, boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::expect<boost::fusion::cons<boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::eps>, boost::phoenix::actor<boost::spirit::attribute<2> > >, 2> >, boost::spirit::unused_type>, boost::fusion::cons<boost::spirit::qi::omit_directive<boost::spirit::qi::lazy_directive<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::spirit::terminal<custom::tag::parse_from_range>, boost::phoenix::actor<boost::spirit::attribute<2> > >, 2> >, boost::spirit::qi::lazy_parser<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<boost::phoenix::actor<boost::spirit::attribute<1> > >, 1> >, boost::spirit::unused_type>, boost::spirit::unused_type> >, boost::fusion::nil_> > > >, boost::fusion::nil_> > >, mpl_::bool_<true> > >' requested here
            lhs.f = detail::bind_parser<Auto>(
                  ^
/usr/local/include/boost/spirit/home/qi/nonterminal/rule.hpp:247:13: note: in instantiation of function template specialization 'boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, std::__cxx11::basic_string<char> (boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *&, boost::iterator_range<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > > &), boost::spirit::unused_type, boost::spirit::unused_type, boost::spirit::unused_type>::define<mpl_::bool_<true>, boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::raw>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::spirit::qi::symbols<char, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *, boost::spirit::qi::tst<char, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *>, boost::spirit::qi::tst_pass_through> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<1> >, 0>, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::eps, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::eps>, boost::phoenix::actor<boost::spirit::attribute<2> > >, 2> >, 1> >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<custom::tag::parse_from_range, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::spirit::terminal<custom::tag::parse_from_range>, boost::phoenix::actor<boost::spirit::attribute<2> > >, 2> >, 1> >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<boost::phoenix::actor<boost::spirit::attribute<1> > >, 1> > >, 0> &>, 2> &>, 2> &>, 2> &>, 1> &>, 2> >' requested here
            define<mpl::true_>(r, expr, traits::matches<qi::domain, Expr>());
            ^
main.cpp:257:18: note: in instantiation of function template specialization 'boost::spirit::qi::operator%=<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::raw>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::spirit::qi::symbols<char, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *, boost::spirit::qi::tst<char, boost::spirit::qi::rule<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::variant<mine::int_1, mine::int_2a, mine::int_2b> (), boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0>, boost::spirit::unused_type, boost::spirit::unused_type> *>, boost::spirit::qi::tst_pass_through> &, const boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::attribute<1> >, 0>, boost::phoenix::actor<boost::spirit::argument<0> > >, 2> > &>, 2> &>, 2> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate, boost::proto::argsns_::list1<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::greater, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<boost::spirit::tag::eps, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::eps>, boost::phoenix::actor<boost::spirit::attribute<2> > >, 2> >, 1> >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::omit>, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript, boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::lazy_terminal<custom::tag::parse_from_range, boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval, boost::proto::argsns_::list2<boost::spirit::terminal<custom::tag::parse_from_range>, boost::phoenix::actor<boost::spirit::attribute<2> > >, 2> >, 1> >, 0> &, const boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::dereference, boost::proto::argsns_::list1<boost::phoenix::actor<boost::spirit::attribute<1> > >, 1> > >, 0> &>, 2> &>, 2> &>, 2> &>, 1> &>, 2> >' requested here
    parsed_type_ %=  raw[value_selector [ _r1  = _1 ]]
                 ^
main.cpp:315:15: note: in instantiation of member function 'mine::grammar<__gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> >, boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal, boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >, 0> >::grammar' requested here
  grammar<It> g;
              ^
main.cpp:356:21: note: in instantiation of function template specialization 'mine::parse<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<const char *, std::__cxx11::basic_string<char> > >' requested here
  auto mine = mine::parse(sample1); std::cout << mine << '\n';
                    ^
/usr/local/include/boost/function/function_template.hpp:767:17: note: candidate function not viable: no known conversion from 'const boost::spirit::unused_type' to 'const boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space, boost::spirit::char_encoding::standard> >' for 4th argument
    result_type operator()(BOOST_FUNCTION_PARMS) const
                ^
1 error generated.
