In file included from /usr/local/include/c++/4.9.2/memory:81:0,
                 from main.cpp:1:
/usr/local/include/c++/4.9.2/bits/unique_ptr.h: In instantiation of 'constexpr std::unique_ptr<_Tp, _Dp>::unique_ptr() [with _Tp = void; _Dp = void (*)(void*)]':
/usr/local/include/c++/4.9.2/tuple:1102:70:   required from 'std::pair<_T1, _T2>::pair(std::tuple<_Args1 ...>&, std::tuple<_Args2 ...>&, std::_Index_tuple<_Indexes1 ...>, std::_Index_tuple<_Indexes2 ...>) [with _Args1 = {std::type_index&&}; long unsigned int ..._Indexes1 = {0ul}; _Args2 = {}; long unsigned int ..._Indexes2 = {}; _T1 = const std::type_index; _T2 = std::unique_ptr<void, void (*)(void*)>]'
/usr/local/include/c++/4.9.2/tuple:1091:63:   required from 'std::pair<_T1, _T2>::pair(std::piecewise_construct_t, std::tuple<_Args1 ...>, std::tuple<_Args2 ...>) [with _Args1 = {std::type_index&&}; _Args2 = {}; _T1 = const std::type_index; _T2 = std::unique_ptr<void, void (*)(void*)>]'
/usr/local/include/c++/4.9.2/ext/new_allocator.h:120:4:   required from 'void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> >; _Args = {const std::piecewise_construct_t&, std::tuple<std::type_index&&>, std::tuple<>}; _Tp = std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> >]'
/usr/local/include/c++/4.9.2/bits/alloc_traits.h:253:4:   required from 'static std::_Require<typename std::allocator_traits<_Alloc>::__construct_helper<_Tp, _Args>::type> std::allocator_traits<_Alloc>::_S_construct(_Alloc&, _Tp*, _Args&& ...) [with _Tp = std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> >; _Args = {const std::piecewise_construct_t&, std::tuple<std::type_index&&>, std::tuple<>}; _Alloc = std::allocator<std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> > >; std::_Require<typename std::allocator_traits<_Alloc>::__construct_helper<_Tp, _Args>::type> = void]'
/usr/local/include/c++/4.9.2/bits/alloc_traits.h:399:57:   required from 'static decltype (_S_construct(__a, __p, (forward<_Args>)(std::allocator_traits::construct::__args)...)) std::allocator_traits<_Alloc>::construct(_Alloc&, _Tp*, _Args&& ...) [with _Tp = std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> >; _Args = {const std::piecewise_construct_t&, std::tuple<std::type_index&&>, std::tuple<>}; _Alloc = std::allocator<std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> > >; decltype (_S_construct(__a, __p, (forward<_Args>)(std::allocator_traits::construct::__args)...)) = <type error>]'
/usr/local/include/c++/4.9.2/bits/hashtable_policy.h:1958:40:   required from 'std::__detail::_Hashtable_alloc<_NodeAlloc>::__node_type* std::__detail::_Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&& ...) [with _Args = {const std::piecewise_construct_t&, std::tuple<std::type_index&&>, std::tuple<>}; _NodeAlloc = std::allocator<std::__detail::_Hash_node<std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> >, false> >; std::__detail::_Hashtable_alloc<_NodeAlloc>::__node_type = std::__detail::_Hash_node<std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> >, false>]'
/usr/local/include/c++/4.9.2/bits/hashtable_policy.h:627:8:   required from 'std::__detail::_Map_base<_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::mapped_type& std::__detail::_Map_base<_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::operator[](std::__detail::_Map_base<_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::key_type&&) [with _Key = std::type_index; _Pair = std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> >; _Alloc = std::allocator<std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> > >; _Equal = std::equal_to<std::type_index>; _H1 = std::hash<std::type_index>; _H2 = std::__detail::_Mod_range_hashing; _Hash = std::__detail::_Default_ranged_hash; _RehashPolicy = std::__detail::_Prime_rehash_policy; _Traits = std::__detail::_Hashtable_traits<false, false, true>; std::__detail::_Map_base<_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::mapped_type = std::unique_ptr<void, void (*)(void*)>; std::__detail::_Map_base<_Key, _Pair, _Alloc, std::__detail::_Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::key_type = std::type_index]'
/usr/local/include/c++/4.9.2/bits/unordered_map.h:631:20:   required from 'std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type&&) [with _Key = std::type_index; _Tp = std::unique_ptr<void, void (*)(void*)>; _Hash = std::hash<std::type_index>; _Pred = std::equal_to<std::type_index>; _Alloc = std::allocator<std::pair<const std::type_index, std::unique_ptr<void, void (*)(void*)> > >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type = std::unique_ptr<void, void (*)(void*)>; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type = std::type_index]'
main.cpp:20:21:   required from 'void entity::add(Args&& ...) [with Component = pos; Args = {int, int}]'
main.cpp:37:20:   required from here
/usr/local/include/c++/4.9.2/bits/unique_ptr.h:159:9: error: static assertion failed: constructed with null function pointer deleter
       { static_assert(!is_pointer<deleter_type>::value,
         ^
