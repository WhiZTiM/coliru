In file included from main.cpp:1:
In file included from /usr/local/include/boost/range/adaptor/transformed.hpp:15:
In file included from /usr/local/include/boost/range/detail/default_constructible_unary_fn.hpp:13:
/usr/local/include/boost/optional/optional.hpp:674:80: error: object of type 'std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)>' cannot be assigned because its copy assignment operator is implicitly deleted
    void assign_value ( argument_type val, is_not_reference_tag ) { get_impl() = val; }
                                                                               ^
/usr/local/include/boost/optional/optional.hpp:335:14: note: in instantiation of member function 'boost::optional_detail::optional_base<std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)> >::assign_value' requested here
             assign_value(rhs.get_impl(), is_reference_predicate() );
             ^
/usr/local/include/boost/optional/optional.hpp:911:15: note: in instantiation of member function 'boost::optional_detail::optional_base<std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)> >::assign' requested here
        this->assign( static_cast<base const&>(rhs) ) ;
              ^
/usr/local/include/boost/range/detail/default_constructible_unary_fn.hpp:23:7: note: in instantiation of member function 'boost::optional<std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)> >::operator=' requested here
class default_constructible_unary_fn_wrapper
      ^
main.cpp:35:23: note: in instantiation of function template specialization 'boost::range::min_element<boost::range_detail::transformed_range<std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)>, std::vector<int, std::allocator<int> > > >' requested here
    int min = *boost::min_element(values | boost::adaptors::transformed(
                      ^
/usr/local/bin/../lib/gcc/x86_64-unknown-linux-gnu/5.1.0/../../../../include/c++/5.1.0/functional:1119:7: note: copy assignment operator is implicitly deleted because '_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)>' has a user-declared move constructor
      _Bind(_Bind&& __b)
      ^
/usr/local/bin/../lib/gcc/x86_64-unknown-linux-gnu/5.1.0/../../../../include/c++/5.1.0/functional:634:20: error: left hand operand to .* must be a class compatible with the right hand operand, but is 'Base'
        { return ((*__ptr).*_M_pmf)(std::forward<_Args>(__args)...); }
                          ^
/usr/local/bin/../lib/gcc/x86_64-unknown-linux-gnu/5.1.0/../../../../include/c++/5.1.0/functional:609:11: note: in instantiation of function template specialization 'std::_Mem_fn_base<int (B::*)(const A &, int), true>::_M_call<Base *const &, A &, int &>' requested here
          return _M_call(std::forward<_Tp>(__object), &__object,
                 ^
/usr/local/bin/../lib/gcc/x86_64-unknown-linux-gnu/5.1.0/../../../../include/c++/5.1.0/functional:1082:11: note: in instantiation of function template specialization 'std::_Mem_fn_base<int (B::*)(const A &, int), true>::operator()<Base *const &, A &, int &, void>' requested here
          return _M_f(_Mu<_Bound_args>()
                 ^
/usr/local/bin/../lib/gcc/x86_64-unknown-linux-gnu/5.1.0/../../../../include/c++/5.1.0/functional:1145:17: note: in instantiation of function template specialization 'std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)>::__call_c<int, int &, 0, 1, 2>' requested here
          return this->__call_c<_Result>(
                       ^
/usr/local/include/boost/range/detail/default_constructible_unary_fn.hpp:45:16: note: in instantiation of function template specialization 'std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)>::operator()<int &, int>' requested here
        return (*m_impl)(arg);
               ^
/usr/local/include/boost/iterator/transform_iterator.hpp:122:14: note: in instantiation of function template specialization 'boost::range_detail::default_constructible_unary_fn_wrapper<std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)>, int>::operator()<int>' requested here
    { return m_f(*this->base()); }
             ^
/usr/local/include/boost/iterator/iterator_facade.hpp:540:20: note: in instantiation of member function 'boost::iterators::transform_iterator<boost::range_detail::default_constructible_unary_fn_wrapper<std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)>, int>, __gnu_cxx::__normal_iterator<int *, std::vector<int, std::allocator<int> > >, boost::iterators::use_default, boost::iterators::use_default>::dereference' requested here
          return f.dereference();
                   ^
/usr/local/include/boost/iterator/iterator_facade.hpp:646:42: note: in instantiation of function template specialization 'boost::iterators::iterator_core_access::dereference<boost::iterators::transform_iterator<boost::range_detail::default_constructible_unary_fn_wrapper<std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)>, int>, __gnu_cxx::__normal_iterator<int *, std::vector<int, std::allocator<int> > >, boost::iterators::use_default, boost::iterators::use_default> >' requested here
            return iterator_core_access::dereference(this->derived());
                                         ^
main.cpp:35:15: note: in instantiation of member function 'boost::iterators::detail::iterator_facade_base<boost::iterators::transform_iterator<boost::range_detail::default_constructible_unary_fn_wrapper<std::_Bind<std::_Mem_fn<int (B::*)(const A &, int)> (Base *, std::reference_wrapper<A>, std::_Placeholder<1>)>, int>, __gnu_cxx::__normal_iterator<int *, std::vector<int, std::allocator<int> > >, boost::iterators::use_default, boost::iterators::use_default>, int, boost::iterators::random_access_traversal_tag, int, long, false, false>::operator*' requested here
    int min = *boost::min_element(values | boost::adaptors::transformed(
              ^
2 errors generated.
