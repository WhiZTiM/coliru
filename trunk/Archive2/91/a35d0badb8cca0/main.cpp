#include <boost/variant.hpp>#include <boost/any.hpp>#include <iostream>#include <iterator>#include <algorithm>#include <map>#include <fstream>#include <string>#include <sys/stat.h>typedef boost::variant<std::string*, int*, bool*> val_t;std::string& deref(val_t& value){    return *boost::get<std::string*>(value);}   class DLNA{public:    std::string location;    bool isLocal;    auto createMap()    {        std::cout << "opening file" << std::endl;        std::ifstream myfile("content.xml");    	        std::cout << "checking file state" << std::endl;        if (myfile.is_open())        {            std::cout << "file is open" << std::endl;                    	std::map<std::string, val_t> varmap;            varmap["location"] = &location;        	            std::for_each(std::istream_iterator<std::string>(myfile),                          std::istream_iterator<std::string>(),                          [&](std::string line)            {                if((line.find("<") != std::string::npos) && (line.find(">")!= std::string::npos))                 {                    auto first_open(std::find(cbegin(line), cend(line), '<'));                    assert(first_open != end(line));                    auto first_close(std::find(cbegin(line), cend(line), '>'));                    assert(first_close != end(line));                    auto second_open(std::find(first_close, cend(line), '<'));                    assert(second_open != end(line));                    deref(varmap[std::string(std::next(first_open),                                              std::prev(first_close))]) = std::string(std::next(first_close),                                                                                     std::prev(second_open));                                }            });            return varmap;        }        return std::map<std::string, val_t>();    }};std::string getDeviceList(std::map<std::string, val_t> mapvar, std::string key){    std::cout << deref(mapvar[key]) << std::endl;    return deref(mapvar[key]);}int main(){    std::cout << "starting up" << std::endl;    DLNA local;        auto local_vals(local.createMap());    getDeviceList(local_vals, "isLocal");        std::cout << "closing down" << std::endl;        return 0;}