#include <boost/variant.hpp>#include <boost/any.hpp>#include <iostream>#include <iterator>#include <algorithm>#include <map>#include <fstream>#include <string>#include <sys/stat.h>       using namespace std;        class DLNA    {       public:        string location;    bool isLocal;    typedef boost::variant<std::string*, int*, bool*> key_type;	std::map<string, key_type> createMap()    	{    		string line;      		ifstream myfile ("content.xml");    		long num = GetFileSize("content.xml");    		string *myArray;    		myArray = new string[num];      		string str1 = "";      		string strNew2 = "";      		int counter = 0;      		if (myfile.is_open())      		{    		    while ( getline (myfile,line) )    		    {    			myArray[counter] = line;    		        counter++;    		    }    		    myfile.close();    		}				std::map<string, key_type> varmap;        varmap["location"] = static_cast<string>(&location);        //this function effectively creates a strnew that is the parsed key (in this case, "location") and the strNew2 which is the value		/*		for(int i = 0; i < myArray->size(); i++)    		{    		      string line = myArray[i];    		      if((line.find("<") != std::string::npos) && (line.find(">")!= std::string::npos))     		      {    		      	 unsigned first = line.find("<");    		      	 unsigned last = line.find(">");    		      	 string strNew = line.substr (first + 1, last - first - 1); //this line will get the key, in this case, "IPAddress"    			 unsigned newfirst = line.find(">");    		      	 unsigned newlast = line.find_last_of("<");    			 string strNew2 = line.substr(newfirst + 1, newlast - newfirst - 1); //this line will get the value, in this case, "123.45.67"				 if(varmap.find(strNew) != varmap.end() )			 {			 	*varmap[strNew] = strNew2;			 }    		    		      }    		}*/		return varmap;    	}    	long GetFileSize(std::string filename)    	{        		struct stat stat_buf;        		int rc = stat(filename.c_str(), &stat_buf);        		return rc == 0 ? stat_buf.st_size : -1;    	}         string getDeviceList(std::map<string, string*> mapvar, string key)	{				cout << *mapvar[key] << endl;		return *mapvar[key];	}        };            int main(int argc, char* argv[])    {      DLNA local;      std::map<string, key_type> varmap = local.createMap();            //local.getDeviceList(varmap, "isLocal");      return 0;    }